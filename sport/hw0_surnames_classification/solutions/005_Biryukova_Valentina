{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import re\n",
    "import pymorphy2\n",
    "from catboost import CatBoostClassifier\n",
    "\n",
    "pd.set_option.max_columns = None\n",
    "pd.set_option.max_rows = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test = pd.read_csv('test.csv')\n",
    "train = pd.read_csv('train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Запоминаем индексы дублированных пар слов.\n",
    "# У первого слова из такой пары всегда в трейне 0, у второго 1.\n",
    "# Можно допустить, что и в тесте будет так же. Спойлер: будет.\n",
    "\n",
    "doub = test.groupby(['Word'])['Word'].count()\n",
    "test = test.join(doub, on='Word', rsuffix='_d')\n",
    "li = test[test.Word_d == 2].index\n",
    "limi = li[::2]\n",
    "li = li[1::2]\n",
    "test = test.drop('Word_d', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# А теперь чистим трейн от пар-дубликатов. \n",
    "\n",
    "doub = train.groupby(['Word'])['Word'].count()\n",
    "train = train.join(doub, on='Word', rsuffix='_d')\n",
    "            \n",
    "train[train.Word_d == 2]\n",
    "train = train[train.Word_d != 2].drop('Word_d', axis=1).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Генерация дополнительных фич\n",
    "\n",
    "train['Upper'] = train['Word'].apply(lambda x: 1 if (x[0].isupper() and x[1:].islower()) else 0)\n",
    "test['Upper'] = test['Word'].apply(lambda x: 1 if (x[0].isupper() and x[1:].islower()) else 0)\n",
    "\n",
    "train['Lower'] = train['Word'].apply(lambda x: 1 if (x.islower()) else 0)\n",
    "test['Lower'] = test['Word'].apply(lambda x: 1 if (x.islower()) else 0)\n",
    "\n",
    "train['All_upper'] = train['Word'].apply(lambda x: 1 if (x.isupper()) else 0)\n",
    "test['All_upper'] = test['Word'].apply(lambda x: 1 if (x.isupper()) else 0)\n",
    "\n",
    "train['Mixed'] = train['Word'].apply(lambda x: 1 if not x.isupper() and not x.islower() else 0)\n",
    "test['Mixed'] = test['Word'].apply(lambda x: 1 if not x.isupper() and not x.islower() else 0)\n",
    "\n",
    "train['Mixed'] = train['Mixed'] - train['Upper']\n",
    "test['Mixed'] = test['Mixed'] - test['Upper']\n",
    "\n",
    "train['Length'] = train['Word'].apply(lambda x: len(x))\n",
    "test['Length'] = test['Word'].apply(lambda x: len(x))\n",
    "\n",
    "vowels = set('уеыаоэяиюУЕЫАОЭЯИЮ')\n",
    "train['Vow'] = train['Word'].apply(lambda x: len(re.findall('[уеыаоэяию]', x, re.IGNORECASE))) \n",
    "test['Vow'] = test['Word'].apply(lambda x: len(re.findall('[уеыаоэяию]', x, re.IGNORECASE)))\n",
    "\n",
    "train['Con'] = train['Length'] - train['Vow']\n",
    "test['Con'] = test['Length'] - test['Vow']\n",
    "\n",
    "train['Noncyr'] = train['Word'].apply(lambda x: len(re.findall(r\"\"\"[!.><:;'@#~{}\\[\\]_+=£$%^&()?]\"\"\", x, re.IGNORECASE))) \n",
    "test['Noncyr'] = test['Word'].apply(lambda x: len(re.findall(r\"\"\"[!.><:;'@#~{}\\[\\]_+=£$%^&()?]\"\"\", x, re.IGNORECASE)))\n",
    "\n",
    "train['Non-cyr'] = train['Word'].apply(lambda x: len(re.findall(r\"\"\"[\\-]\"\"\", x, re.IGNORECASE))) \n",
    "test['Non-cyr'] = test['Word'].apply(lambda x: len(re.findall(r\"\"\"[\\-]\"\"\", x, re.IGNORECASE)))\n",
    "\n",
    "train['ConL'] = train['Con']/train['Length']\n",
    "test['ConL'] = test['Con']/test['Length']\n",
    "\n",
    "train['VowL'] = train['Vow']/train['Length']\n",
    "test['VowL'] = test['Vow']/test['Length']\n",
    "\n",
    "train['Num'] = train['Word'].apply(lambda x: len(re.findall('[1-90]', x, re.IGNORECASE))) \n",
    "test['Num'] = test['Word'].apply(lambda x: len(re.findall('[1-90]', x, re.IGNORECASE)))\n",
    "\n",
    "test.Word = test.Word.str.lower()\n",
    "train.Word = train.Word.str.lower()\n",
    "\n",
    "train['Last_3'] = train['Word'].apply(lambda x: x[-3:])\n",
    "test['Last_3'] = test['Word'].apply(lambda x: x[-3:])\n",
    "\n",
    "train['Last_2'] = train['Word'].apply(lambda x: x[-4:-1])\n",
    "test['Last_2'] = test['Word'].apply(lambda x: x[-4:-1])\n",
    "\n",
    "train['Last_22'] = train['Word'].apply(lambda x: x[-2:])\n",
    "test['Last_22'] = test['Word'].apply(lambda x: x[-2:])\n",
    "\n",
    "train['Last_4'] = train['Word'].apply(lambda x: x[-4:])\n",
    "test['Last_4'] = test['Word'].apply(lambda x: x[-4:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(99958, 18) (188920, 17)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Word</th>\n",
       "      <th>Upper</th>\n",
       "      <th>Lower</th>\n",
       "      <th>All_upper</th>\n",
       "      <th>Mixed</th>\n",
       "      <th>Length</th>\n",
       "      <th>Vow</th>\n",
       "      <th>Con</th>\n",
       "      <th>Noncyr</th>\n",
       "      <th>Non-cyr</th>\n",
       "      <th>ConL</th>\n",
       "      <th>VowL</th>\n",
       "      <th>Num</th>\n",
       "      <th>Last_3</th>\n",
       "      <th>Last_2</th>\n",
       "      <th>Last_22</th>\n",
       "      <th>Last_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>аалто</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0</td>\n",
       "      <td>лто</td>\n",
       "      <td>алт</td>\n",
       "      <td>то</td>\n",
       "      <td>алто</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>аар</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>аар</td>\n",
       "      <td>аа</td>\n",
       "      <td>ар</td>\n",
       "      <td>аар</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>аара</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0</td>\n",
       "      <td>ара</td>\n",
       "      <td>аар</td>\n",
       "      <td>ра</td>\n",
       "      <td>аара</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ааре</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>0</td>\n",
       "      <td>аре</td>\n",
       "      <td>аар</td>\n",
       "      <td>ре</td>\n",
       "      <td>ааре</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>аарон</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0</td>\n",
       "      <td>рон</td>\n",
       "      <td>аро</td>\n",
       "      <td>он</td>\n",
       "      <td>арон</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>аароне</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>оне</td>\n",
       "      <td>рон</td>\n",
       "      <td>не</td>\n",
       "      <td>роне</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ааронов</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0</td>\n",
       "      <td>нов</td>\n",
       "      <td>оно</td>\n",
       "      <td>ов</td>\n",
       "      <td>онов</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>аароном</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0</td>\n",
       "      <td>ном</td>\n",
       "      <td>оно</td>\n",
       "      <td>ом</td>\n",
       "      <td>оном</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>аароном</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.428571</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0</td>\n",
       "      <td>ном</td>\n",
       "      <td>оно</td>\n",
       "      <td>ом</td>\n",
       "      <td>оном</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>аарону</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0</td>\n",
       "      <td>ону</td>\n",
       "      <td>рон</td>\n",
       "      <td>ну</td>\n",
       "      <td>рону</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Word  Upper  Lower  All_upper  Mixed  Length  Vow  Con  Noncyr  Non-cyr  \\\n",
       "0    аалто      1      0          0      0       5    3    2       0        0   \n",
       "1      аар      0      0          1      0       3    2    1       0        0   \n",
       "2     аара      1      0          0      0       4    3    1       0        0   \n",
       "3     ааре      1      0          0      0       4    3    1       0        0   \n",
       "4    аарон      1      0          0      0       5    3    2       0        0   \n",
       "5   аароне      1      0          0      0       6    4    2       0        0   \n",
       "6  ааронов      1      0          0      0       7    4    3       0        0   \n",
       "7  аароном      1      0          0      0       7    4    3       0        0   \n",
       "8  аароном      1      0          0      0       7    4    3       0        0   \n",
       "9   аарону      1      0          0      0       6    4    2       0        0   \n",
       "\n",
       "       ConL      VowL  Num Last_3 Last_2 Last_22 Last_4  \n",
       "0  0.400000  0.600000    0    лто    алт      то   алто  \n",
       "1  0.333333  0.666667    0    аар     аа      ар    аар  \n",
       "2  0.250000  0.750000    0    ара    аар      ра   аара  \n",
       "3  0.250000  0.750000    0    аре    аар      ре   ааре  \n",
       "4  0.400000  0.600000    0    рон    аро      он   арон  \n",
       "5  0.333333  0.666667    0    оне    рон      не   роне  \n",
       "6  0.428571  0.571429    0    нов    оно      ов   онов  \n",
       "7  0.428571  0.571429    0    ном    оно      ом   оном  \n",
       "8  0.428571  0.571429    0    ном    оно      ом   оном  \n",
       "9  0.333333  0.666667    0    ону    рон      ну   рону  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_full = train.copy()\n",
    "test_full = test.copy()\n",
    "\n",
    "print(train_full.shape, test_full.shape)\n",
    "test_full.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Генерация фич с помощью библиотеки pymorphy2\n",
    "\n",
    "morph = pymorphy2.MorphAnalyzer()\n",
    "ind = len(train_full)\n",
    "all_data = pd.concat([train_full, test_full]).reset_index(drop=True)\n",
    "\n",
    "all_data['pymorphy'] = all_data['Word'].apply(lambda x: morph.tag(x)[0])\n",
    "\n",
    "all_data['pymorphy_animacy'] = all_data['pymorphy'].apply(lambda x: x.animacy)\n",
    "all_data['pymorphy_POS'] = all_data['pymorphy'].apply(lambda x: x.POS)\n",
    "all_data['pymorphy_case'] = all_data['pymorphy'].apply(lambda x: x.case)\n",
    "all_data['pymorphy_number'] = all_data['pymorphy'].apply(lambda x: x.number)\n",
    "all_data['pymorphy_gender'] = all_data['pymorphy'].apply(lambda x: x.gender)\n",
    "\n",
    "all_data.drop('pymorphy' , axis=1 , inplace=True)\n",
    "\n",
    "train_full = all_data[:ind].reset_index(drop=True)\n",
    "test_full = all_data[ind:].reset_index(drop=True)\n",
    "test_full = test_full.drop('Label' , axis=1)\n",
    "\n",
    "morph = pymorphy2.MorphAnalyzer()\n",
    "\n",
    "train_full['norm'] = train_full['Word'].apply(lambda x: morph.parse(x)[0].normal_form)\n",
    "test_full['norm'] = test_full['Word'].apply(lambda x: morph.parse(x)[0].normal_form)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>All_upper</th>\n",
       "      <th>Con</th>\n",
       "      <th>ConL</th>\n",
       "      <th>Last_2</th>\n",
       "      <th>Last_22</th>\n",
       "      <th>Last_3</th>\n",
       "      <th>Last_4</th>\n",
       "      <th>Length</th>\n",
       "      <th>Lower</th>\n",
       "      <th>Mixed</th>\n",
       "      <th>...</th>\n",
       "      <th>Upper</th>\n",
       "      <th>Vow</th>\n",
       "      <th>VowL</th>\n",
       "      <th>Word</th>\n",
       "      <th>pymorphy_animacy</th>\n",
       "      <th>pymorphy_POS</th>\n",
       "      <th>pymorphy_case</th>\n",
       "      <th>pymorphy_number</th>\n",
       "      <th>pymorphy_gender</th>\n",
       "      <th>norm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>алт</td>\n",
       "      <td>то</td>\n",
       "      <td>лто</td>\n",
       "      <td>алто</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>аалто</td>\n",
       "      <td>None</td>\n",
       "      <td>ADJS</td>\n",
       "      <td>None</td>\n",
       "      <td>sing</td>\n",
       "      <td>neut</td>\n",
       "      <td>аалтый</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>аа</td>\n",
       "      <td>ар</td>\n",
       "      <td>аар</td>\n",
       "      <td>аар</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>аар</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>аар</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>аар</td>\n",
       "      <td>ра</td>\n",
       "      <td>ара</td>\n",
       "      <td>аара</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>аара</td>\n",
       "      <td>inan</td>\n",
       "      <td>NOUN</td>\n",
       "      <td>gent</td>\n",
       "      <td>sing</td>\n",
       "      <td>masc</td>\n",
       "      <td>аар</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>аар</td>\n",
       "      <td>ре</td>\n",
       "      <td>аре</td>\n",
       "      <td>ааре</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>ааре</td>\n",
       "      <td>inan</td>\n",
       "      <td>NOUN</td>\n",
       "      <td>nomn</td>\n",
       "      <td>sing</td>\n",
       "      <td>femn</td>\n",
       "      <td>ааре</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>аро</td>\n",
       "      <td>он</td>\n",
       "      <td>рон</td>\n",
       "      <td>арон</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>аарон</td>\n",
       "      <td>anim</td>\n",
       "      <td>NOUN</td>\n",
       "      <td>nomn</td>\n",
       "      <td>sing</td>\n",
       "      <td>masc</td>\n",
       "      <td>аарон</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   All_upper  Con      ConL Last_2 Last_22 Last_3 Last_4  Length  Lower  \\\n",
       "0          0    2  0.400000    алт      то    лто   алто       5      0   \n",
       "1          1    1  0.333333     аа      ар    аар    аар       3      0   \n",
       "2          0    1  0.250000    аар      ра    ара   аара       4      0   \n",
       "3          0    1  0.250000    аар      ре    аре   ааре       4      0   \n",
       "4          0    2  0.400000    аро      он    рон   арон       5      0   \n",
       "\n",
       "   Mixed   ...    Upper  Vow      VowL   Word  pymorphy_animacy  pymorphy_POS  \\\n",
       "0      0   ...        1    3  0.600000  аалто              None          ADJS   \n",
       "1      0   ...        0    2  0.666667    аар              None          None   \n",
       "2      0   ...        1    3  0.750000   аара              inan          NOUN   \n",
       "3      0   ...        1    3  0.750000   ааре              inan          NOUN   \n",
       "4      0   ...        1    3  0.600000  аарон              anim          NOUN   \n",
       "\n",
       "  pymorphy_case pymorphy_number pymorphy_gender    norm  \n",
       "0          None            sing            neut  аалтый  \n",
       "1          None            None            None     аар  \n",
       "2          gent            sing            masc     аар  \n",
       "3          nomn            sing            femn    ааре  \n",
       "4          nomn            sing            masc   аарон  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_full.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Last_2', 'Last_22', 'Last_3', 'Last_4', 'pymorphy_animacy',\n",
       "       'pymorphy_POS', 'pymorphy_case', 'pymorphy_number', 'pymorphy_gender',\n",
       "       'norm'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_full = train_full.drop(['Word', 'Label'], axis=1).fillna('nan')\n",
    "test_full = test_full.drop(['Word'], axis=1).fillna('nan')\n",
    "\n",
    "#Выделение категориальных фич для катбуста\n",
    "\n",
    "cat_features = np.where(train_full.dtypes == 'object')[0].tolist()\n",
    "train_full.columns[cat_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\tlearn: 0.8564098\ttotal: 209ms\tremaining: 3m 28s\n",
      "10:\tlearn: 0.9522805\ttotal: 1.42s\tremaining: 2m 8s\n",
      "20:\tlearn: 0.9563019\ttotal: 2.7s\tremaining: 2m 5s\n",
      "30:\tlearn: 0.9572253\ttotal: 4.06s\tremaining: 2m 7s\n",
      "40:\tlearn: 0.9585026\ttotal: 5.46s\tremaining: 2m 7s\n",
      "50:\tlearn: 0.9604299\ttotal: 6.75s\tremaining: 2m 5s\n",
      "60:\tlearn: 0.9616829\ttotal: 8.38s\tremaining: 2m 8s\n",
      "70:\tlearn: 0.9620339\ttotal: 9.71s\tremaining: 2m 7s\n",
      "80:\tlearn: 0.9626448\ttotal: 11s\tremaining: 2m 5s\n",
      "90:\tlearn: 0.9641309\ttotal: 12.4s\tremaining: 2m 3s\n",
      "100:\tlearn: 0.9645556\ttotal: 13.7s\tremaining: 2m 1s\n",
      "110:\tlearn: 0.9648009\ttotal: 15s\tremaining: 2m\n",
      "120:\tlearn: 0.9650949\ttotal: 16.4s\tremaining: 1m 58s\n",
      "130:\tlearn: 0.9652716\ttotal: 17.8s\tremaining: 1m 57s\n",
      "140:\tlearn: 0.9655462\ttotal: 19.1s\tremaining: 1m 56s\n",
      "150:\tlearn: 0.9659745\ttotal: 20.5s\tremaining: 1m 55s\n",
      "160:\tlearn: 0.9662229\ttotal: 21.8s\tremaining: 1m 53s\n",
      "170:\tlearn: 0.9664349\ttotal: 23.2s\tremaining: 1m 52s\n",
      "180:\tlearn: 0.9667152\ttotal: 24.5s\tremaining: 1m 50s\n",
      "190:\tlearn: 0.9669368\ttotal: 25.8s\tremaining: 1m 49s\n",
      "200:\tlearn: 0.9671714\ttotal: 27.2s\tremaining: 1m 47s\n",
      "210:\tlearn: 0.9673735\ttotal: 28.5s\tremaining: 1m 46s\n",
      "220:\tlearn: 0.9676524\ttotal: 29.8s\tremaining: 1m 45s\n",
      "230:\tlearn: 0.9678035\ttotal: 31.2s\tremaining: 1m 43s\n",
      "240:\tlearn: 0.9688812\ttotal: 32.6s\tremaining: 1m 42s\n",
      "250:\tlearn: 0.9690086\ttotal: 34s\tremaining: 1m 41s\n",
      "260:\tlearn: 0.9691484\ttotal: 35.4s\tremaining: 1m 40s\n",
      "270:\tlearn: 0.9692786\ttotal: 36.8s\tremaining: 1m 39s\n",
      "280:\tlearn: 0.9694454\ttotal: 38.3s\tremaining: 1m 38s\n",
      "290:\tlearn: 0.9697473\ttotal: 39.7s\tremaining: 1m 36s\n",
      "300:\tlearn: 0.9698564\ttotal: 41s\tremaining: 1m 35s\n",
      "310:\tlearn: 0.9700831\ttotal: 42.4s\tremaining: 1m 33s\n",
      "320:\tlearn: 0.9702580\ttotal: 43.8s\tremaining: 1m 32s\n",
      "330:\tlearn: 0.9704425\ttotal: 45.2s\tremaining: 1m 31s\n",
      "340:\tlearn: 0.9706472\ttotal: 46.6s\tremaining: 1m 30s\n",
      "350:\tlearn: 0.9707777\ttotal: 48s\tremaining: 1m 28s\n",
      "360:\tlearn: 0.9709422\ttotal: 49.4s\tremaining: 1m 27s\n",
      "370:\tlearn: 0.9710478\ttotal: 50.8s\tremaining: 1m 26s\n",
      "380:\tlearn: 0.9713357\ttotal: 52.2s\tremaining: 1m 24s\n",
      "390:\tlearn: 0.9714386\ttotal: 53.6s\tremaining: 1m 23s\n",
      "400:\tlearn: 0.9715786\ttotal: 54.9s\tremaining: 1m 22s\n",
      "410:\tlearn: 0.9716783\ttotal: 56.3s\tremaining: 1m 20s\n",
      "420:\tlearn: 0.9718542\ttotal: 57.7s\tremaining: 1m 19s\n",
      "430:\tlearn: 0.9720197\ttotal: 59s\tremaining: 1m 17s\n",
      "440:\tlearn: 0.9723836\ttotal: 1m\tremaining: 1m 16s\n",
      "450:\tlearn: 0.9725066\ttotal: 1m 1s\tremaining: 1m 15s\n",
      "460:\tlearn: 0.9726351\ttotal: 1m 3s\tremaining: 1m 13s\n",
      "470:\tlearn: 0.9731670\ttotal: 1m 4s\tremaining: 1m 12s\n",
      "480:\tlearn: 0.9732836\ttotal: 1m 5s\tremaining: 1m 11s\n",
      "490:\tlearn: 0.9735018\ttotal: 1m 7s\tremaining: 1m 9s\n",
      "500:\tlearn: 0.9735870\ttotal: 1m 8s\tremaining: 1m 8s\n",
      "510:\tlearn: 0.9737904\ttotal: 1m 9s\tremaining: 1m 6s\n",
      "520:\tlearn: 0.9739671\ttotal: 1m 11s\tremaining: 1m 5s\n",
      "530:\tlearn: 0.9740710\ttotal: 1m 12s\tremaining: 1m 4s\n",
      "540:\tlearn: 0.9741199\ttotal: 1m 14s\tremaining: 1m 2s\n",
      "550:\tlearn: 0.9743389\ttotal: 1m 15s\tremaining: 1m 1s\n",
      "560:\tlearn: 0.9744583\ttotal: 1m 16s\tremaining: 1m\n",
      "570:\tlearn: 0.9745516\ttotal: 1m 18s\tremaining: 58.7s\n",
      "580:\tlearn: 0.9746060\ttotal: 1m 19s\tremaining: 57.3s\n",
      "590:\tlearn: 0.9747671\ttotal: 1m 20s\tremaining: 56s\n",
      "600:\tlearn: 0.9748890\ttotal: 1m 22s\tremaining: 54.6s\n",
      "610:\tlearn: 0.9749657\ttotal: 1m 23s\tremaining: 53.2s\n",
      "620:\tlearn: 0.9752306\ttotal: 1m 25s\tremaining: 51.9s\n",
      "630:\tlearn: 0.9753637\ttotal: 1m 26s\tremaining: 50.5s\n",
      "640:\tlearn: 0.9754484\ttotal: 1m 27s\tremaining: 49.1s\n",
      "650:\tlearn: 0.9755877\ttotal: 1m 29s\tremaining: 47.8s\n",
      "660:\tlearn: 0.9757488\ttotal: 1m 30s\tremaining: 46.4s\n",
      "670:\tlearn: 0.9758440\ttotal: 1m 31s\tremaining: 45s\n",
      "680:\tlearn: 0.9759696\ttotal: 1m 33s\tremaining: 43.7s\n",
      "690:\tlearn: 0.9760955\ttotal: 1m 34s\tremaining: 42.3s\n",
      "700:\tlearn: 0.9762511\ttotal: 1m 35s\tremaining: 40.9s\n",
      "710:\tlearn: 0.9763442\ttotal: 1m 37s\tremaining: 39.5s\n",
      "720:\tlearn: 0.9765039\ttotal: 1m 38s\tremaining: 38.2s\n",
      "730:\tlearn: 0.9769078\ttotal: 1m 40s\tremaining: 36.9s\n",
      "740:\tlearn: 0.9770891\ttotal: 1m 41s\tremaining: 35.6s\n",
      "750:\tlearn: 0.9771599\ttotal: 1m 43s\tremaining: 34.3s\n",
      "760:\tlearn: 0.9773152\ttotal: 1m 44s\tremaining: 32.9s\n",
      "770:\tlearn: 0.9773998\ttotal: 1m 46s\tremaining: 31.5s\n",
      "780:\tlearn: 0.9776205\ttotal: 1m 47s\tremaining: 30.2s\n",
      "790:\tlearn: 0.9777396\ttotal: 1m 49s\tremaining: 28.8s\n",
      "800:\tlearn: 0.9778716\ttotal: 1m 50s\tremaining: 27.5s\n",
      "810:\tlearn: 0.9780300\ttotal: 1m 51s\tremaining: 26.1s\n",
      "820:\tlearn: 0.9780964\ttotal: 1m 53s\tremaining: 24.7s\n",
      "830:\tlearn: 0.9781697\ttotal: 1m 54s\tremaining: 23.4s\n",
      "840:\tlearn: 0.9783686\ttotal: 1m 56s\tremaining: 22s\n",
      "850:\tlearn: 0.9784182\ttotal: 1m 57s\tremaining: 20.6s\n",
      "860:\tlearn: 0.9786286\ttotal: 1m 59s\tremaining: 19.2s\n",
      "870:\tlearn: 0.9787520\ttotal: 2m\tremaining: 17.8s\n",
      "880:\tlearn: 0.9789038\ttotal: 2m 1s\tremaining: 16.5s\n",
      "890:\tlearn: 0.9789639\ttotal: 2m 3s\tremaining: 15.1s\n",
      "900:\tlearn: 0.9790468\ttotal: 2m 4s\tremaining: 13.7s\n",
      "910:\tlearn: 0.9791779\ttotal: 2m 6s\tremaining: 12.3s\n",
      "920:\tlearn: 0.9793146\ttotal: 2m 7s\tremaining: 10.9s\n",
      "930:\tlearn: 0.9794480\ttotal: 2m 9s\tremaining: 9.57s\n",
      "940:\tlearn: 0.9795741\ttotal: 2m 10s\tremaining: 8.19s\n",
      "950:\tlearn: 0.9796370\ttotal: 2m 12s\tremaining: 6.81s\n",
      "960:\tlearn: 0.9797339\ttotal: 2m 13s\tremaining: 5.42s\n",
      "970:\tlearn: 0.9798156\ttotal: 2m 15s\tremaining: 4.04s\n",
      "980:\tlearn: 0.9799564\ttotal: 2m 16s\tremaining: 2.65s\n",
      "990:\tlearn: 0.9800547\ttotal: 2m 18s\tremaining: 1.26s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostClassifier at 0x7f972bf0f780>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ctb = CatBoostClassifier(random_seed=777, iterations=1000, loss_function='CrossEntropy', eval_metric='AUC', od_type='IncToDec', od_pval=0.01, max_depth=4, learning_rate=1, metric_period=10)\n",
    "ctb.fit(train_full, train['Label'], cat_features=cat_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CAT AUC:  0.987855808274\n"
     ]
    }
   ],
   "source": [
    "print('CAT AUC: ', roc_auc_score(train['Label'], ctb.predict_proba(train_full)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sub = pd.read_csv('sample_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sub = sub.reset_index(drop=True)\n",
    "sub['Prediction'] = ctb.predict_proba(test_full)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/user/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py:179: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._setitem_with_indexer(indexer, value)\n"
     ]
    }
   ],
   "source": [
    "# Постобработка предсказаний, для чего мы в начале запоминали индексы\n",
    "\n",
    "ma = sub['Prediction'].max()\n",
    "mi = sub['Prediction'].min()\n",
    "sub['Prediction'].loc[li] = ma\n",
    "sub['Prediction'].loc[limi] = mi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>5.130481e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4.442368e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2.247837e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1.971415e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>3.695602e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2.008027e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>8.727521e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>5.313770e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>5.313770e-10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id    Prediction\n",
       "0   0  5.130481e-03\n",
       "1   1  4.442368e-03\n",
       "2   2  2.247837e-01\n",
       "3   3  1.971415e-01\n",
       "4   4  3.695602e-02\n",
       "5   5  2.008027e-03\n",
       "6   6  8.727521e-02\n",
       "7   7  5.313770e-10\n",
       "8   8  1.000000e+00\n",
       "9   9  5.313770e-10"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sub.to_csv('submission_catboost.csv', columns=['Id', 'Prediction'], index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
